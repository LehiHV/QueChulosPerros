@page "/citas"
@using QueChulosPerros.Shared.Model;
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Schedule
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using System.ComponentModel.DataAnnotations

@inject HttpClient http;

<div class="container-fluid">
    <div class="col-md-12">
        <SfSchedule TValue="Cita" @bind-SelectedDate="@CurrentDate" EnableAutoRowHeight="true"
                    EnableAdaptiveUI="true" @ref="scheduleObj" ShowQuickInfo="false">
            <ScheduleEvents TValue="Cita" OnPopupClose="OnPopupClose"></ScheduleEvents>
            <ScheduleTemplates>
                    <EditorHeaderTemplate>
                        @{
                            var subject = (context as Cita)?.Subject;
                        }
                        @if (string.IsNullOrEmpty(subject))
                        {
                            <div>Agendar nueva cita</div>
                        }
                        else
                        {
                            <div>@subject</div>
                        }
                    </EditorHeaderTemplate>
                <EditorTemplate>
                    <DataAnnotationsValidator />
                     <table class="custom-event-editor" width="100%" cellpadding="5">
                        <tbody>
                            <tr>
                                <td class="e-textlabel">Razón</td>
                                <td colspan="4">
                                    <SfTextBox @bind-Value="((context as Cita).Subject)"></SfTextBox>
                                    <ValidationMessage For="@(()=>(context as Cita).Subject)" />
                                </td>
                            </tr>
                            <tr>
                                <td class="e-textlabel">Cliente</td>
                                <td colspan="4">
                                    <SfDropDownList ID="ClientId" DataSource="@clientes" Placeholder="Escoge el cliente" @bind-Value="@((context as Cita).ClientId)">
                                        <DropDownListFieldSettings Text="Name" Value="Id"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                    <ValidationMessage For="@(()=>(context as Cita).ClientId)" />
                                </td>
                            </tr>
                            <tr>
                                <td class="e-textlabel">Desde</td>
                                <td colspan="4">
                                    <SfDateTimePicker @bind-Value="@((context as Cita).StartTime)"></SfDateTimePicker>
                                    <ValidationMessage For="@(()=>(context as Cita).StartTime)" />
                                </td>
                            </tr>
                            <tr>
                                <td class="e-textlabel">Hasta</td>
                                <td colspan="4">
                                    <SfDateTimePicker @bind-Value="@((context as Cita).EndTime)"></SfDateTimePicker>
                                    <ValidationMessage For="@(()=>(context as Cita).EndTime)" />
                                </td>
                            </tr>
                            <tr>
                                <td class="e-textlabel">Mascota</td>
                                <td colspan="4">
                                    <SfDropDownList ID="PetId" DataSource="@(mascotas.Where(m => m.ClientId == ((context as Cita).ClientId)).ToList())" Placeholder="Escoge la mascota" @bind-Value="@((context as Cita).PetId)">
                                        <DropDownListFieldSettings Text="Name" Value="Id"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                    <ValidationMessage For="@(()=>(context as Cita).PetId)" />
                                </td>
                            </tr>
                        </tbody>
                    </table>                
                    @{
                        nuevaCita = (context as Cita);
                    }
                    
                </EditorTemplate>
                <EditorFooterTemplate>
                    <div id="event-footer">
                        <div id="verify">
                            <SfCheckBox @bind-Checked="@isChecked" @onchange="@(() => isSaveButtonDisabled = !isChecked)">
                                <label htmlFor="check-box" id="text">Verificado</label>
                            </SfCheckBox>
                        </div><div id="right-button">
                            <SfButton IsPrimary="true" Disabled="@isSaveButtonDisabled" OnClick="@(() => FooterButtonClick(true))">Guardar</SfButton>
                            <SfButton IsPrimary="true" OnClick="@(() => FooterButtonClick(false))">Cancelar</SfButton>
                        </div>
                    </div>
                    
                </EditorFooterTemplate>
            </ScheduleTemplates>
            <ScheduleEventSettings DataSource="@agendarCita">
                <Template>
                    <div>Razón: @((context as Cita).Subject)</div>
                    <div>Mascota:  @((context as Cita).Pet.Name)</div>
                    <div>Cliente: @((context as Cita).Client.Name)</div>
                </Template>
            </ScheduleEventSettings>                
            <ScheduleViews>
                <ScheduleView Option="View.Day" StartHour="8:00" EndHour="19:00">Día</ScheduleView>
                <ScheduleView Option="View.Week" StartHour="8:00" EndHour="19:00"></ScheduleView>
                <ScheduleView Option="View.WorkWeek" WorkDays="@WorkingDays" StartHour="8:00" EndHour="19:00"></ScheduleView>
                <ScheduleView Option="View.Month" StartHour="8:00" EndHour="19:00"></ScheduleView>
                <ScheduleView Option="View.Agenda" StartHour="8:00" EndHour="19:00"></ScheduleView>
            </ScheduleViews>
        </SfSchedule>
    </div>
</div>

@code {
    DateTime CurrentDate = DateTime.Today;
    private List<Cita>? agendarCita;
    private List<Mascota>? mascotas;
    private List<Cliente>? clientes;
    private Cita nuevaCita = new Cita();

    public int[] WorkingDays { get; set; } = { 1, 2, 3, 4, 5, 6 };
    private bool isSaveClick = false;
    private bool isChecked = false;
    private bool isSaveButtonDisabled = true;
    SfSchedule<Cita> scheduleObj;


    protected override async Task OnInitializedAsync()
    {
        agendarCita = await http!.GetFromJsonAsync<List<Cita>>("api/citas");
        clientes = await http.GetFromJsonAsync<List<Cliente>>("api/Clientes");
        mascotas = await http.GetFromJsonAsync<List<Mascota>>("api/Mascotas");
    }
    

    public async Task OnPopupClose(PopupCloseEventArgs<Cita> args)
    {
        if (args.Type == PopupType.Editor && args.Data != null && isSaveClick)
        {
            if (args.Data.Id != 0)
            {
                await scheduleObj.SaveEventAsync(args.Data);
            }
            else
            {
                args.Data.Id = await scheduleObj.GetMaxEventIdAsync<int>();
                await scheduleObj.AddEventAsync(args.Data);
                // nuevaCita = (args.Data as Cita);
                await HandleValidSubmit();
            }

        }
    }
    private void FooterButtonClick(bool isSave)
    {
        isSaveClick = isSave;
        scheduleObj.CloseEditor();
    }
 
    async Task HandleValidSubmit()
    {
        await http!.PostAsJsonAsync("/api/citas", nuevaCita);
        nuevaCita = new Cita();
    }
}

